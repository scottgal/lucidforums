import { _ as __classPrivateFieldSet, a as __classPrivateFieldGet } from './index-B_0rW-za.js';
import { StateEffect } from '@codemirror/state';
import { ViewPlugin } from '@codemirror/view';
import '@codemirror/lang-markdown';
import '@codemirror/language';
import '@lezer/highlight';
import 'marked';

const countWords = (document) => document
    .toJSON()
    .reduce((previous, current) => previous +
    (current ? current.split(" ").filter(Boolean).length : 0), 0);

var _StatusBar_instances, _StatusBar_characterCount, _StatusBar_wordCount, _StatusBar_lineCount, _StatusBar_cursorLine, _StatusBar_cursorColumn, _StatusBar_selectionStart, _StatusBar_selectionEnd, _StatusBar_getSelectionDirection;
class StatusBar {
    constructor(editor) {
        _StatusBar_instances.add(this);
        this.editor = editor;
        _StatusBar_characterCount.set(this, 0);
        _StatusBar_wordCount.set(this, 0);
        _StatusBar_lineCount.set(this, 1);
        _StatusBar_cursorLine.set(this, 1);
        _StatusBar_cursorColumn.set(this, 1);
        _StatusBar_selectionStart.set(this, 0);
        _StatusBar_selectionEnd.set(this, 0);
        this.element = document.createElement("div");
        this.element.className = "easymde-statusbar";
        // Initial values
        __classPrivateFieldSet(this, _StatusBar_characterCount, this.editor.codemirror.state.doc.length, "f");
        __classPrivateFieldSet(this, _StatusBar_wordCount, countWords(this.editor.codemirror.state.doc), "f");
        __classPrivateFieldSet(this, _StatusBar_lineCount, this.editor.codemirror.state.doc.lines, "f");
        const line = this.editor.codemirror.state.doc.lineAt(this.editor.codemirror.state.selection.main.to);
        __classPrivateFieldSet(this, _StatusBar_cursorLine, line.number, "f");
        __classPrivateFieldSet(this, _StatusBar_cursorColumn, this.editor.codemirror.state.selection.main.to - line.from + 1, "f");
        __classPrivateFieldSet(this, _StatusBar_selectionStart, this.editor.codemirror.state.selection.main.from, "f");
        __classPrivateFieldSet(this, _StatusBar_selectionEnd, this.editor.codemirror.state.selection.main.to, "f");
        this.editor.codemirror.dispatch({
            effects: StateEffect.appendConfig.of(ViewPlugin.define(() => ({
                update: (update) => {
                    var _a;
                    const document = update.state.doc;
                    const selection = update.state.selection.main;
                    __classPrivateFieldSet(this, _StatusBar_characterCount, document.length, "f");
                    __classPrivateFieldSet(this, _StatusBar_wordCount, countWords(document), "f");
                    __classPrivateFieldSet(this, _StatusBar_lineCount, document.lines, "f");
                    const direction = __classPrivateFieldGet(this, _StatusBar_instances, "m", _StatusBar_getSelectionDirection).call(this, selection);
                    const toLine = document.lineAt(selection.to);
                    const fromLine = document.lineAt(selection.from);
                    let cursorLine;
                    if (direction === "left") {
                        // Cursor is at the start of the selection.
                        cursorLine = fromLine;
                        __classPrivateFieldSet(this, _StatusBar_cursorColumn, selection.from - cursorLine.from, "f");
                    }
                    else {
                        // Cursor is at the end of the selection, or there is no selection.
                        cursorLine = toLine;
                        __classPrivateFieldSet(this, _StatusBar_cursorColumn, selection.to - cursorLine.from, "f");
                        if (__classPrivateFieldGet(this, _StatusBar_cursorColumn, "f") > toLine.length) {
                            // Column is incorrect, can happen when Ctrl+A is used. We need to manually adjust it.
                            __classPrivateFieldSet(this, _StatusBar_cursorColumn, toLine.length, "f");
                        }
                    }
                    __classPrivateFieldSet(this, _StatusBar_cursorLine, cursorLine.number, "f");
                    __classPrivateFieldSet(this, _StatusBar_selectionStart, selection.from, "f");
                    __classPrivateFieldSet(this, _StatusBar_selectionEnd, selection.to, "f");
                    // We start counting columns at 1.
                    __classPrivateFieldSet(this, _StatusBar_cursorColumn, (_a = __classPrivateFieldGet(this, _StatusBar_cursorColumn, "f"), _a++, _a), "f");
                    this.render();
                },
            }))),
        });
        this.render();
    }
    render() {
        this.element.innerHTML = `
        <span class="status-bar-element">Lines: ${__classPrivateFieldGet(this, _StatusBar_lineCount, "f")}</span>
        <span class="status-bar-element">Words: ${__classPrivateFieldGet(this, _StatusBar_wordCount, "f")}</span>
        <span class="status-bar-element">Characters: ${__classPrivateFieldGet(this, _StatusBar_characterCount, "f")}</span>
        <span class="status-bar-element">Pos: ${__classPrivateFieldGet(this, _StatusBar_cursorLine, "f")}:${__classPrivateFieldGet(this, _StatusBar_cursorColumn, "f")}</span>
        `;
    }
}
_StatusBar_characterCount = new WeakMap(), _StatusBar_wordCount = new WeakMap(), _StatusBar_lineCount = new WeakMap(), _StatusBar_cursorLine = new WeakMap(), _StatusBar_cursorColumn = new WeakMap(), _StatusBar_selectionStart = new WeakMap(), _StatusBar_selectionEnd = new WeakMap(), _StatusBar_instances = new WeakSet(), _StatusBar_getSelectionDirection = function _StatusBar_getSelectionDirection(selection) {
    return selection.from === __classPrivateFieldGet(this, _StatusBar_selectionStart, "f")
        ? "right"
        : // eslint-disable-next-line sonarjs/no-nested-conditional
            selection.to === __classPrivateFieldGet(this, _StatusBar_selectionEnd, "f")
                ? "left"
                : undefined;
};

export { StatusBar };
//# sourceMappingURL=status-bar-DVp_4tRR.js.map
