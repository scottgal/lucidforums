import { EditorSelection } from '@codemirror/state';
import escapeStringRegexp from 'escape-string-regexp';

/**
 * Checks whether the selection matches a formatted block of text.
 */
const checkBlock = (editor, characters, minimal = false) => {
    //  Checks whether the selection matches a block of formatted text.
    const { state } = editor;
    const { from, to } = getExpandedSelection(state, characters, minimal);
    const text = state.sliceDoc(from, to);
    const escapedCharacters = escapeStringRegexp(characters);
    const regularExpression = new RegExp(`^${escapedCharacters}(.*)${escapedCharacters}$`, "gs");
    const checkResult = regularExpression.exec(text);
    let doubleCharactersCheckResult = null;
    let tripleCharactersCheckResult = null;
    if (characters.length === 1) {
        doubleCharactersCheckResult = checkBlock(editor, characters.repeat(2), minimal);
        tripleCharactersCheckResult = checkBlock(editor, characters.repeat(3), minimal);
    }
    if ((checkResult &&
        doubleCharactersCheckResult &&
        tripleCharactersCheckResult) ||
        (checkResult &&
            !doubleCharactersCheckResult &&
            tripleCharactersCheckResult) ||
        (checkResult &&
            !doubleCharactersCheckResult &&
            !tripleCharactersCheckResult)) {
        return checkResult;
    }
    return null;
};
/**
 * Toggles a block of text to be formatted.
 */
const toggleBlock = (editor, characters) => {
    const { state } = editor;
    const { from, to } = getExpandedSelection(state, characters);
    const text = state.sliceDoc(from, to);
    const textMatch = checkBlock(editor, characters);
    console.log(from, to, text, textMatch);
    editor.dispatch(state.changeByRange(() => textMatch
        ? {
            changes: [{ from, insert: textMatch[1], to }],
            range: EditorSelection.range(from, to - (characters.length + characters.length)),
        }
        : {
            changes: [
                {
                    from,
                    insert: `${characters}${text}${characters}`,
                    to,
                },
            ],
            range: EditorSelection.range(from, to + (characters.length + characters.length)),
        }));
    editor.focus();
};
/**
 * Attempts to expand the cursor selection to the nearest logical block of text needs to be formatted.
 */
const getExpandedSelection = (state, characters, minimal = false) => {
    let { from, to } = state.selection.main;
    let fromPosition = from;
    while (fromPosition >= 0) {
        const newText = state.sliceDoc(fromPosition, to);
        if (newText.startsWith("\n") || newText.startsWith("\t")) {
            fromPosition++;
            break;
            // eslint-disable-next-line sonarjs/no-duplicated-branches
        }
        else if (minimal && newText.startsWith(" ")) {
            fromPosition++;
            break;
        }
        else if (newText.startsWith(characters + " ")) {
            fromPosition += characters.length + 1;
            break;
        }
        else if (newText.length > characters.length &&
            newText.startsWith(characters)) {
            break;
        }
        fromPosition--;
    }
    from = fromPosition;
    let toPosition = to;
    while (toPosition < state.doc.length) {
        const newText = state.sliceDoc(from, toPosition);
        if (newText.endsWith("\n") || newText.endsWith("\t")) {
            toPosition--;
            break;
            // eslint-disable-next-line sonarjs/no-duplicated-branches
        }
        else if (minimal && newText.endsWith(" ")) {
            toPosition--;
            break;
        }
        else if (newText.length > characters.length &&
            newText.endsWith(characters)) {
            break;
        }
        toPosition++;
    }
    to = toPosition;
    return correctInvalidSelection({ from, to });
};
/**
 * Sometimes the selection expands beyond the start of the document, which causes an error.
 * This function corrects the selection if it is invalid.
 */
const correctInvalidSelection = ({ from, to, }) => {
    if (from < 0) {
        from = 0;
    }
    return { from, to };
};

const toggleBold = (editor) => toggleBlock(editor.codemirror, editor.options.blockStyles.bold);
const checkBold = (editor, _update) => Boolean(checkBlock(editor.codemirror, editor.options.blockStyles.bold));
const toggleBoldButton = {
    action: toggleBold,
    active: checkBold,
    icon: "fas fa-bold",
    name: "bold",
    title: "Bold",
};

const toggleCode = (editor) => toggleBlock(editor.codemirror, editor.options.blockStyles.code);
const toggleCodeButton = {
    action: toggleCode,
    icon: "fas fa-code",
    name: "code",
    title: "Code",
};

const toggleItalic = (editor) => toggleBlock(editor.codemirror, editor.options.blockStyles.italic);
const checkItalic = (editor, _update) => Boolean(checkBlock(editor.codemirror, editor.options.blockStyles.italic));
const toggleItalicButton = {
    action: toggleItalic,
    active: checkItalic,
    icon: "fas fa-italic",
    name: "italic",
    title: "Italic",
};

const toggleStrikethrough = (editor) => toggleBlock(editor.codemirror, editor.options.blockStyles.strikethrough);
const toggleStrikethroughButton = {
    action: toggleStrikethrough,
    icon: "fas fa-strikethrough",
    name: "strikethrough",
    title: "Strikethrough",
};

const defaultToolbar = [
    [
        toggleBoldButton,
        toggleItalicButton,
        toggleStrikethroughButton,
        {
            // action: toggleHeadingSmaller,
            icon: "fas fa-header fa-heading",
            name: "heading",
            title: "Heading",
        },
    ],
    [
        toggleCodeButton,
        {
            // action: toggleBlockquote,
            icon: "fas fa-quote-left",
            name: "quote",
            title: "Quote",
        },
        {
            // action: toggleUnorderedList,
            icon: "fas fa-list-ul",
            name: "unordered-list",
            title: "Generic List",
        },
        {
            // action: toggleOrderedList,
            icon: "fas fa-list-ol",
            name: "ordered-list",
            title: "Numbered List",
        },
        {
            // action: cleanBlock,
            icon: "fas fa-eraser",
            name: "clean-block",
            title: "Clean block",
        },
    ],
    [
        {
            // action: drawLink,
            icon: "fas fa-link",
            name: "link",
            title: "Create Link",
        },
        {
            // action: drawImage,
            icon: "fas fa-image",
            name: "image",
            title: "Insert Image",
            // }, {
            //     // action: drawHorizontalRule,
            //     icon: 'fas fa-minus',
            //     name: 'horizontal-rule',
            //     title: 'Insert Horizontal Line',
            // }], [{
            //     action: NewMDE.togglePreview,
            //     icon: 'fas fa-eye',
            //     name: 'preview',
            //     // noDisable: true,
            //     // noMobile: true,
            //     title: 'Toggle Preview',
            // }, {
            //     action: NewMDE.toggleSideBySide,
            //     icon: 'fas fa-columns',
            //     name: 'side-by-side',
            //     // noDisable: true,
            //     // noMobile: true,
            //     title: 'Toggle Side by Side',
            // }, {
            //     action: NewMDE.toggleFullScreen,
            //     icon: 'fas fa-arrows-alt',
            //     name: 'fullscreen',
            //     // noDisable: true,
            //     // noMobile: true,
            //     title: 'Toggle Fullscreen',
        },
    ],
    [
        {
            action: "https://simplemde.com/markdown-guide",
            icon: "fas fa-question",
            name: "guide",
            // noDisable: true,
            title: "Markdown Guide",
            // }], [{
            //     action: NewMDE.undo,
            //     icon: 'fas fa-undo',
            //     name: 'undo',
            //     // noDisable: true,
            //     title: 'Undo',
            // }, {
            //     action: NewMDE.redo,
            //     icon: 'fas fa-repeat',
            //     name: 'redo',
            //     // noDisable: true,
            //     title: 'Redo',
        },
    ],
];

export { defaultToolbar };
//# sourceMappingURL=default-toolbar-Ddmsx7_D.js.map
