import { markdown, markdownLanguage } from '@codemirror/lang-markdown';
import { HighlightStyle, syntaxHighlighting, defaultHighlightStyle } from '@codemirror/language';
import { EditorState } from '@codemirror/state';
import { EditorView, drawSelection } from '@codemirror/view';
import { tags } from '@lezer/highlight';
import { marked } from 'marked';

/******************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */
/* global Reflect, Promise, SuppressedError, Symbol, Iterator */


function __classPrivateFieldGet(receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
}

function __classPrivateFieldSet(receiver, state, value, kind, f) {
    if (kind === "m") throw new TypeError("Private method is not writable");
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
    return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
}

typeof SuppressedError === "function" ? SuppressedError : function (error, suppressed, message) {
    var e = new Error(message);
    return e.name = "SuppressedError", e.error = error, e.suppressed = suppressed, e;
};

class AlreadyConstructedError extends Error {
    constructor() {
        super("EasyMDE is already initialized.");
        this.name = "AlreadyConstructedError";
    }
}

class NotConstructedError extends Error {
    constructor() {
        super('EasyMDE is not initialized, run the "construct()" method to do so.');
        this.name = "NotConstructedError";
    }
}

const importToolbar = () => import('./toolbar-CGPMJtk9.js');
const importDefaultToolbar = () => import('./default-toolbar-Ddmsx7_D.js');

var _EasyMDE_instances, _a, _EasyMDE_element, _EasyMDE_container, _EasyMDE_codemirror, _EasyMDE_options, _EasyMDE_plugins, _EasyMDE_verifyAndReturnElement, _EasyMDE_createToolbar, _EasyMDE_createStatusBar, _EasyMDE_createContainer;
class EasyMDE {
    constructor(options) {
        _EasyMDE_instances.add(this);
        _EasyMDE_element.set(this, void 0);
        _EasyMDE_container.set(this, void 0);
        _EasyMDE_codemirror.set(this, void 0);
        _EasyMDE_options.set(this, void 0);
        _EasyMDE_plugins.set(this, []);
        __classPrivateFieldSet(this, _EasyMDE_options, {
            ...options,
            blockStyles: {
                bold: "**",
                italic: "*",
                strikethrough: "~~",
                code: "`",
            },
        }, "f");
        __classPrivateFieldSet(this, _EasyMDE_element, __classPrivateFieldGet(_a, _a, "m", _EasyMDE_verifyAndReturnElement).call(_a, options.element), "f");
        marked.parse("# EasyMDE", { async: false });
        // eslint-disable-next-line sonarjs/no-async-constructor
        void this.construct();
    }
    get container() {
        if (!__classPrivateFieldGet(this, _EasyMDE_container, "f")) {
            throw new NotConstructedError();
        }
        return __classPrivateFieldGet(this, _EasyMDE_container, "f");
    }
    get codemirror() {
        if (!__classPrivateFieldGet(this, _EasyMDE_codemirror, "f")) {
            throw new NotConstructedError();
        }
        return __classPrivateFieldGet(this, _EasyMDE_codemirror, "f");
    }
    get options() {
        return Object.freeze(__classPrivateFieldGet(this, _EasyMDE_options, "f"));
    }
    get isRendered() {
        return Boolean(this.container && this.codemirror);
    }
    async construct() {
        if (__classPrivateFieldGet(this, _EasyMDE_container, "f") && __classPrivateFieldGet(this, _EasyMDE_codemirror, "f")) {
            throw new AlreadyConstructedError();
        }
        // Customize the markdown highlight style.
        const highlightStyle = HighlightStyle.define([
            {
                tag: tags.heading1,
                fontSize: "200%",
                lineHeight: "200%",
                textDecoration: "none",
            },
            {
                tag: tags.heading2,
                fontSize: "160%",
                lineHeight: "160%",
                textDecoration: "none",
            },
            {
                tag: tags.heading3,
                fontSize: "125%",
                lineHeight: "125%",
                textDecoration: "none",
            },
            {
                tag: tags.heading4,
                fontSize: "110%",
                lineHeight: "110%",
                textDecoration: "none",
            },
            {
                tag: tags.heading5,
                fontSize: "105%",
                lineHeight: "105%",
                textDecoration: "none",
            },
            {
                tag: tags.heading6,
                fontSize: "100%",
                lineHeight: "100%",
                textDecoration: "none",
            },
            {
                tag: tags.monospace,
                fontFamily: "monospace",
                textDecoration: "none",
                background: "rgba(0, 0, 0, 0.05)",
            },
        ]);
        __classPrivateFieldGet(this, _EasyMDE_element, "f").hidden = true;
        __classPrivateFieldSet(this, _EasyMDE_codemirror, new EditorView({
            state: EditorState.create({
                doc: __classPrivateFieldGet(this, _EasyMDE_element, "f").value,
                extensions: [
                    EditorView.lineWrapping,
                    syntaxHighlighting(highlightStyle),
                    syntaxHighlighting(defaultHighlightStyle),
                    markdown({
                        base: markdownLanguage,
                        // codeLanguages: languages,
                    }),
                    drawSelection(),
                ],
                selection: {
                    anchor: __classPrivateFieldGet(this, _EasyMDE_element, "f").value.length,
                },
            }),
            // parent: this.element.parentElement || document.body,
        }), "f");
        const easyMDEContainer = __classPrivateFieldGet(this, _EasyMDE_instances, "m", _EasyMDE_createContainer).call(this);
        if (this.options.toolbar !== false) {
            easyMDEContainer.append(await __classPrivateFieldGet(this, _EasyMDE_instances, "m", _EasyMDE_createToolbar).call(this));
        }
        easyMDEContainer.append(this.codemirror.dom);
        if (this.options.statusbar !== false) {
            easyMDEContainer.append(await __classPrivateFieldGet(this, _EasyMDE_instances, "m", _EasyMDE_createStatusBar).call(this));
        }
        __classPrivateFieldGet(this, _EasyMDE_element, "f").insertAdjacentElement("afterend", easyMDEContainer);
        this.codemirror.focus();
        __classPrivateFieldSet(this, _EasyMDE_container, easyMDEContainer, "f");
    }
    destruct() {
        __classPrivateFieldGet(this, _EasyMDE_element, "f").value = this.codemirror.state.doc.toString();
        for (const plugin of __classPrivateFieldGet(this, _EasyMDE_plugins, "f")) {
            void plugin.destroy();
        }
        this.codemirror.destroy();
        this.container.remove();
        __classPrivateFieldSet(this, _EasyMDE_container, undefined, "f");
        __classPrivateFieldSet(this, _EasyMDE_codemirror, undefined, "f");
        __classPrivateFieldGet(this, _EasyMDE_element, "f").hidden = false;
    }
    addPlugin(plugin) {
        __classPrivateFieldGet(this, _EasyMDE_plugins, "f").push(plugin);
        return plugin;
    }
}
_a = EasyMDE, _EasyMDE_element = new WeakMap(), _EasyMDE_container = new WeakMap(), _EasyMDE_codemirror = new WeakMap(), _EasyMDE_options = new WeakMap(), _EasyMDE_plugins = new WeakMap(), _EasyMDE_instances = new WeakSet(), _EasyMDE_verifyAndReturnElement = function _EasyMDE_verifyAndReturnElement(element) {
    if (!(element instanceof HTMLTextAreaElement)) {
        throw new TypeError('EasyMDE: Parameter "element" must be a TextArea.');
    }
    return element;
}, _EasyMDE_createToolbar = async function _EasyMDE_createToolbar() {
    const [{ Toolbar }, { defaultToolbar }] = await Promise.all([
        importToolbar(),
        importDefaultToolbar(),
    ]);
    const toolbar = new Toolbar(this, defaultToolbar);
    this.addPlugin(toolbar);
    // await toolbar.build(defaultToolbar);
    return toolbar.element;
}, _EasyMDE_createStatusBar = async function _EasyMDE_createStatusBar() {
    const { StatusBar } = await import('./status-bar-DVp_4tRR.js');
    const statusBar = new StatusBar(this);
    return statusBar.element;
}, _EasyMDE_createContainer = function _EasyMDE_createContainer() {
    const container = document.createElement("div");
    container.classList.add("easymde-container");
    return container;
};

class EasyMarkdownEditor extends HTMLElement {
    constructor() {
        super();
        this.name = "World";
        this.name = "World";
    }
    connectedCallback() {
        const shadow = this.attachShadow({ mode: "closed" });
        shadow.innerHTML = "Hello World!" + this.name;
    }
    static get observedAttributes() {
        return ["name"];
    }
    attributeChangedCallback(name, oldValue, newValue) {
        if (name === "name") {
            this.name = newValue;
        }
        console.log("Attribute Changed", name, oldValue, newValue);
    }
}
customElements.define("easy-markdown-editor", EasyMarkdownEditor);

export { EasyMarkdownEditor as E, __classPrivateFieldSet as _, __classPrivateFieldGet as a, EasyMDE as b, importDefaultToolbar as c, importToolbar as i };
//# sourceMappingURL=index-B_0rW-za.js.map
