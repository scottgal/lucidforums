import { a as __classPrivateFieldGet } from './index-B_0rW-za.js';
import { StateEffect } from '@codemirror/state';
import { ViewPlugin } from '@codemirror/view';
import '@codemirror/lang-markdown';
import '@codemirror/language';
import '@lezer/highlight';
import 'marked';

var _Toolbar_instances, _a, _Toolbar_activeClass, _Toolbar_createToolBarSeparator, _Toolbar_createToolBarButton;
class Toolbar {
    constructor(editor, toolbarLayout) {
        _Toolbar_instances.add(this);
        this.editor = editor;
        this.element = document.createElement("div");
        this.element.className = "easymde-toolbar";
        for (const toolBarButtonSection of toolbarLayout) {
            const toolBarSection = [];
            for (const toolBarButtonOptions of toolBarButtonSection) {
                toolBarSection.push(__classPrivateFieldGet(this, _Toolbar_instances, "m", _Toolbar_createToolBarButton).call(this, toolBarButtonOptions));
            }
            // Create a separator if this is not the last toolbar section.
            if (toolbarLayout.indexOf(toolBarButtonSection) !==
                toolbarLayout.length - 1) {
                toolBarSection.push(__classPrivateFieldGet(this, _Toolbar_instances, "m", _Toolbar_createToolBarSeparator).call(this));
            }
            for (const toolBarEntry of toolBarSection) {
                this.element.append(toolBarEntry);
            }
        }
        this.editor.codemirror.dispatch();
        // Add the toolbar to the editor.
        // const cmWrapper = this.codemirror.getWrapperElement();
        // if (cmWrapper.parentNode) {
        //     cmWrapper.parentNode.insertBefore(toolBar, cmWrapper);
        // }
        // return toolBar;
    }
    // eslint-disable-next-line @typescript-eslint/require-await
    async build(toolbarLayout) {
        for (const toolBarButtonSection of toolbarLayout) {
            const toolBarSection = [];
            for (const toolBarButtonOptions of toolBarButtonSection) {
                toolBarSection.push(__classPrivateFieldGet(this, _Toolbar_instances, "m", _Toolbar_createToolBarButton).call(this, toolBarButtonOptions));
            }
            // Create a separator if this is not the last toolbar section.
            if (toolbarLayout.indexOf(toolBarButtonSection) !==
                toolbarLayout.length - 1) {
                toolBarSection.push(__classPrivateFieldGet(this, _Toolbar_instances, "m", _Toolbar_createToolBarSeparator).call(this));
            }
            for (const toolBarEntry of toolBarSection) {
                this.element.append(toolBarEntry);
            }
        }
    }
    // eslint-disable-next-line @typescript-eslint/require-await
    async destroy() {
        this.element.remove();
    }
}
_a = Toolbar, _Toolbar_instances = new WeakSet(), _Toolbar_createToolBarSeparator = function _Toolbar_createToolBarSeparator() {
    const separatorElement = document.createElement("span");
    separatorElement.className = "separator";
    separatorElement.innerHTML = "|";
    return separatorElement;
}, _Toolbar_createToolBarButton = function _Toolbar_createToolBarButton(toolBarButtonOptions) {
    const buttonElement = document.createElement("button");
    buttonElement.tabIndex = -1;
    buttonElement.classList.add(toolBarButtonOptions.name);
    // Set the button tooltip.
    buttonElement.title = toolBarButtonOptions.title;
    // Set the button onclick action.
    if (typeof toolBarButtonOptions.action === "function") {
        buttonElement.addEventListener("click", () => 
        // eslint-disable-next-line @typescript-eslint/no-unsafe-return, @typescript-eslint/no-unsafe-call
        toolBarButtonOptions.action(this.editor));
        // buttonElement.addEventListener()
    }
    else if (typeof toolBarButtonOptions.action === "string") {
        buttonElement.addEventListener("click", () => 
        // eslint-disable-next-line @typescript-eslint/no-unsafe-argument
        window.open(toolBarButtonOptions.action));
    }
    if (typeof toolBarButtonOptions.active === "boolean") {
        buttonElement.classList.toggle(__classPrivateFieldGet(_a, _a, "f", _Toolbar_activeClass), toolBarButtonOptions.active);
    }
    else if (typeof toolBarButtonOptions.active === "function") {
        this.editor.codemirror.dispatch({
            effects: StateEffect.appendConfig.of(ViewPlugin.define(() => ({
                update: async (update) => {
                    if (typeof toolBarButtonOptions.active ===
                        "function") {
                        const result = await toolBarButtonOptions.active(this.editor, update);
                        buttonElement.classList.toggle(__classPrivateFieldGet(_a, _a, "f", _Toolbar_activeClass), result);
                    }
                },
            }))),
        });
    }
    // Set the button icon.
    const buttonIcon = document.createElement("i");
    buttonIcon.className = toolBarButtonOptions.icon;
    buttonElement.append(buttonIcon);
    return buttonElement;
};
_Toolbar_activeClass = { value: "enabled" };

export { Toolbar };
//# sourceMappingURL=toolbar-CGPMJtk9.js.map
