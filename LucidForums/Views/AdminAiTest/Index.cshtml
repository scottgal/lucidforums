@model LucidForums.Controllers.AdminAiTestController.IndexVm
@{
    Layout = "~/Views/Shared/_Layout.cshtml";
}
<div class="prose-header">
    <h1>Admin AI Test</h1>
    <p class="text-base-content/70">Use this page to test AI interactions with charters and forum thread context.</p>
    <p class="link-row">
        <a class="link link-primary" href="/Admin/AiSettings">Go to AI Settings</a>
        <a class="btn btn-sm btn-accent" href="/Setup" title="Use AI to generate realistic sample content">Populate the site</a>
    </p>
</div>

<div class="grid-2col-xl">
    <div class="card bg-base-100 shadow">
        <div class="card-body">
            <h2 class="card-title">Run Prompt Against Charter</h2>
            <form method="post" asp-action="Run">
                @Html.AntiForgeryToken()
                <div class="form-control">
                    <label class="label">Charter</label>
                    <select name="CharterId" class="select-md">
                        <option value="">(Default: General Assistant)</option>
                        @foreach (var c in Model.CharterOptions)
                        {
                            <option value="@c.Id" selected="@(Model.SelectedCharterId == c.Id)">@c.Name</option>
                        }
                    </select>
                </div>
                <div class="form-control mt-3">
                    <label class="label">Provider</label>
                    <select name="ProviderName" id="providerSelect" class="select-md">
                        @foreach (var p in Model.Providers)
                        {
                            <option value="@p" selected="@(string.Equals(Model.SelectedProvider, p, StringComparison.OrdinalIgnoreCase))">@p</option>
                        }
                    </select>
                </div>
                <div class="form-control mt-3">
                    <label class="label">Model</label>
                    <select name="ModelName" id="modelSelect" class="select-md">
                        <option value="">(Default)</option>
                        @foreach (var m in Model.Models)
                        {
                            <option value="@m" selected="@(string.Equals(Model.ModelName, m, StringComparison.OrdinalIgnoreCase))">@m</option>
                        }
                    </select>
                </div>
                <div class="form-control mt-3">
                    <label class="label">Prompt</label>
                    <textarea name="Prompt" class="textarea-lg" placeholder="Type your prompt here...">@Model.Prompt</textarea>
                </div>
                <div class="action-row">
                    <button class="btn btn-primary" type="submit">Run</button>
                </div>
            </form>
            @if (!string.IsNullOrWhiteSpace(Model.Output))
            {
                <div class="mt-4">
                    <div class="label">Output</div>
                    <pre class="code-pre">@Model.Output</pre>
                </div>
            }
        </div>
    </div>

    <div class="card bg-base-100 shadow">
        <div class="card-body">
            <h2 class="card-title">Translate Text</h2>
            <form method="post" asp-action="Translate">
                @Html.AntiForgeryToken()
                <div class="form-control">
                    <label class="label">Provider</label>
                    <select name="ProviderName" id="providerSelect2" class="select-md">
                        @foreach (var p in Model.Providers)
                        {
                            <option value="@p" selected="@(string.Equals(Model.SelectedProvider, p, StringComparison.OrdinalIgnoreCase))">@p</option>
                        }
                    </select>
                </div>
                <div class="form-control mt-3">
                    <label class="label">Model</label>
                    <select name="ModelName" id="modelSelect2" class="select-md">
                        <option value="">(Default)</option>
                        @foreach (var m in Model.Models)
                        {
                            <option value="@m" selected="@(string.Equals(Model.ModelName, m, StringComparison.OrdinalIgnoreCase))">@m</option>
                        }
                    </select>
                </div>
                <div class="form-control mt-3">
                    <label class="label">Target Language</label>
                    <input name="TargetLanguage" value="@Model.TranslateTarget" class="input-md" placeholder="e.g. Spanish, German, French" />
                </div>
                <div class="form-control mt-3">
                    <label class="label">Text</label>
                    <textarea name="Text" class="textarea-md" placeholder="Type or paste text to translate...">@Model.TranslateText</textarea>
                </div>
                <div class="action-row">
                    <button class="btn" type="submit">Translate</button>
                </div>
            </form>
            @if (!string.IsNullOrWhiteSpace(Model.TranslateOutput))
            {
                <div class="mt-4">
                    <div class="label">Translated Output</div>
                    <pre class="code-pre">@Model.TranslateOutput</pre>
                </div>
            }
        </div>
    </div>

    <div class="card bg-base-100 shadow">
        <div class="card-body">
            <h2 class="card-title">Suggest Reply From Thread Context</h2>
            <form method="post" asp-action="SuggestReply">
                @Html.AntiForgeryToken()
                <div class="form-control">
                    <label class="label">Thread Id</label>
                    <input name="ThreadId" value="@Model.ThreadId" class="input-md" placeholder="Paste a Thread GUID" />
                </div>
                <div class="form-control mt-3">
                    <label class="label">Context Messages</label>
                    <input type="number" name="ContextMessageLimit" value="@Model.ContextMessageLimit" min="1" max="25" class="input input-bordered w-40" />
                </div>
                <div class="form-control mt-3">
                    <label class="label">Charter (optional)</label>
                    <select name="CharterId" class="select-md">
                        <option value="">(Default: Forum Reply Assistant)</option>
                        @foreach (var c in Model.CharterOptions)
                        {
                            <option value="@c.Id" selected="@(Model.SelectedCharterId == c.Id)">@c.Name</option>
                        }
                    </select>
                </div>
                <div class="form-control mt-3">
                    <label class="label">Additional Instruction (optional)</label>
                    <textarea name="Prompt" class="textarea-md" placeholder="Optional guidance to the assistant...">@Model.Prompt</textarea>
                </div>
                <div class="action-row">
                    <button class="btn" type="submit">Suggest Reply</button>
                </div>
            </form>
            @if (!string.IsNullOrWhiteSpace(Model.ReplySuggestion))
            {
                <div class="mt-4">
                    <div class="label">Suggested Reply</div>
                    <pre class="code-pre">@Model.ReplySuggestion</pre>
                </div>
            }
        </div>
    </div>

    <div class="card bg-base-100 shadow">
        <div class="card-body">
            <h2 class="card-title">Test Embeddings</h2>
            <div class="text-sm opacity-70">Uses current embedding settings. Provider: <code>@Model.CurrentEmbeddingProvider</code>, Model: <code>@Model.CurrentEmbeddingModel</code></div>
            <form method="post" asp-action="Embed">
                @Html.AntiForgeryToken()
                <div class="form-control mt-3">
                    <label class="label">Text to Embed</label>
                    <textarea name="Text" class="textarea-md" placeholder="Type text to embed...">@Model.EmbedText</textarea>
                </div>
                <div class="action-row">
                    <button class="btn" type="submit">Embed</button>
                    <a class="btn btn-ghost" href="/Admin/AiSettings">Adjust Embedding Settings</a>
                </div>
            </form>
            @if (Model.EmbedDimensions.HasValue)
            {
                <div class="mt-4">
                    <div class="label">Result</div>
                    <div class="text-sm">Dimensions: <span class="font-mono">@Model.EmbedDimensions</span></div>
                    @if (!string.IsNullOrWhiteSpace(Model.EmbedPreview))
                    {
                        <div class="text-sm mt-2">Preview: <code>@Model.EmbedPreview</code></div>
                    }
                </div>
            }
        </div>
    </div>
</div>

@if (!string.IsNullOrWhiteSpace(Model.Error))
{
    <div class="alert alert-error mt-6">
        <span>@Model.Error</span>
    </div>
}
