@model LucidForums.Models.ViewModels.HomeIndexVm
@{
    ViewData["Title"] = "Home";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<section class="flex flex-col gap-8 animate-slide-in">
    <div class="hero bg-base-100 rounded-box shadow-sm">
        <div class="hero-content text-center">
            <div class="max-w-2xl">
                <h1 class="text-4xl sm:text-5xl font-extrabold">Welcome to <span class="text-primary">LucidForums</span> ✨</h1>
                <p class="py-4 text-base-content/70">
                    A cozy, friendly place to explore lucid dreaming, swap tips, and share your dream adventures.
                </p>
                <div class="join">
                    <a class="btn btn-primary join-item">Get Started</a>
                    <a class="btn btn-outline join-item" href="#forums">Browse Forums</a>
                </div>
            </div>
        </div>
    </div>

    <div id="forums" class="flex items-center justify-between">
        <h2 class="text-2xl font-bold">Forums</h2>
        <div class="form-control">
            <label class="input input-bordered flex items-center gap-2 w-64">
                <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 opacity-70" viewBox="0 0 24 24" fill="currentColor"><path d="M21.707 20.293l-5.657-5.657A7.963 7.963 0 0018 10a8 8 0 10-8 8 7.963 7.963 0 004.636-1.95l5.657 5.657a1 1 0 001.414-1.414zM4 10a6 6 0 1112 0 6 6 0 01-12 0z"/></svg>
                <input type="text" class="grow" name="q" placeholder="Search forums"
                       hx-get="@Url.Action("SearchForums", "Home")"
                       hx-trigger="keyup changed delay:300ms, search"
                       hx-target="#forums-list"
                       hx-swap="innerHTML"
                       hx-indicator=".htmx-indicator" />
                <span class="htmx-indicator loading loading-spinner loading-sm"></span>
            </label>
        </div>
    </div>

    <div id="forums-list">
        @await Html.PartialAsync("_ForumCards", Model.Forums)
    </div>

    <div class="divider"></div>

    <div id="recent" class="flex items-center justify-between">
        <h2 class="text-2xl font-bold">Recent Threads</h2>
    </div>

    <div class="grid gap-3 grid-cols-1">
        @if (Model.RecentThreads != null && Model.RecentThreads.Any())
        {
            foreach (var t in Model.RecentThreads)
            {
                <a class="card bg-base-100 hover:shadow transition-shadow border border-base-300" href="@Url.Action("Show", "Threads", new { id = t.Id })">
                    <div class="card-body py-3">
                        <div class="flex items-center justify-between gap-3">
                            <div class="truncate">
                                <div class="font-semibold truncate">@t.Title</div>
                                <div class="text-xs text-base-content/70">@t.CreatedAtUtc.ToLocalTime().ToString("g")</div>
                            </div>
                            <div class="badge">Thread</div>
                        </div>
                    </div>
                </a>
            }
        }
        else
        {
            <div class="alert">
                <span>No threads yet. Open a forum and start a new thread.</span>
            </div>
        }
    </div>

    <div class="mt-6 p-4 rounded-box bg-base-100 border border-dashed border-base-300 text-sm text-base-content/70">
        Tip: Use the search box to find techniques like WILD, MILD, or reality checks.
    </div>
</section>
